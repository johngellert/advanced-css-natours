.row {
  // it is common to use 1140px however we want to use rems so divide by 10 to get 114rem
  max-width: $grid-width; // use max-width instead of width. if enough available e space it will be the size specific. if smaller, it will fill 100% of the space
  margin: 0 auto;

  // accept everything except the last child
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
  }

  @include clearfix;

  // this is an attribute selector
  // the ^ allows us to select all that start with "col-"
  // the * selects any class tha contains "col-"
  // the $ is any class that ends with "col-"
  [class^="col-"] {
    // since we are using a float layout, we always float left
    // when using float, the height clears and goes to 0px
    // to fix this issue, need to use clearfix
    // see mixin clearfix to resolve this issue.
    float: left;

    // need to remove the gutter form the far right column
    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
  }

  .col-1-of-2 {
    // can mix units here in sass
    // to use the calc function in css, if we want to use a sass variable,
    // it need to have a # and wrapped by a curly braces.
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - (2 * #{$gutter-horizontal})) / 3);
  }

  // here we are taking the column defined in the 1-of-3 calculation above and
  // multiply it by 2 and add the gutter-horizontal
  .col-2-of-3 {
    width: calc(
      2 * ((100% - (2 * #{$gutter-horizontal})) / 3) + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    width: calc((100% - (3 * #{$gutter-horizontal})) / 4);
  }

  .col-2-of-4 {
    width: calc(
      2 * ((100% - (3 * #{$gutter-horizontal})) / 4) + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    width: calc(
      3 * ((100% - (3 * #{$gutter-horizontal})) / 4) +
        (2 * #{$gutter-horizontal})
    );
  }
}
